package lk.ac.mrt.projectx.buildex.complex.langs;

import lk.ac.mrt.projectx.buildex.complex.operations.Guess;

/**
 * @author Chathura Widanage
 */
public class HalideGenerator {
    private String halideBase = "#include \"Halide.h\"\n" +
            "#include <math.h>\n" +
            "using namespace Halide;\n" +
            "/**\n" +
            "* Auto generated by Helium - Project X\n" +
            "* Department of Computer Science & Engineering, Univeristy of Moratuwa, Sri Lanka\n" +
            "*/\n" +
            "int main(int argc, char **argv) {\n" +
            "    \n" +
            "    ImageParam input(UInt(8), 3);\n" +
            "\n" +
            "    Func output(\"output\");\n" +
            "\tVar x(\"x\"), y(\"y\"), c(\"c\");\n" +
            "    \n" +
            "\tFunc clamped(\"clamped\");\n" +
            "\tExpr clamped_x = clamp(x, 0, input.width() - 1);\n" +
            "\tExpr clamped_y = clamp(y, 0, input.height() - 1);\n" +
            "\tclamped(x, y, c) = cast<double>(input(clamped_x, clamped_y, c));\n" +
            "\n" +
            "\tExpr M_PI = cast<double>(3.14159265f);\n" +
            "\t\n" +
            "\tExpr width=input.width();\n" +
            "\tExpr height=input.height();\n" +
            "\n" +
            "\tExpr x_in=x-(width/2);\n" +
            "\tExpr y_in=y-(height/2);\n" +
            "\t\n" +
            "\tExpr r_in = sqrt(pow(x_in, 2) + pow(y_in, 2));\n" +
            "\tExpr theta_in = atan2(x_in, y_in);\n" +
            "\n" +
            "\tExpr r_out=%s;\n" +
            "\t//Expr r_out=%s;\n" +
            "\tExpr theta_out=%s;\n" +
            "\t//Expr theta_out=%s;\n" +
            "\t\n" +
            "\tExpr newX = (r_out*cos(theta_out))+(width/2);\n" +
            "\tExpr newY = (r_out*sin(theta_out))+(height/2);\n" +
            "\n" +
            "\toutput(x, y, c) = cast<uint8_t>(clamped(\n" +
            "\t\tcast<uint8_t>(newX),\n" +
            "\t\tcast<uint8_t>(newY),c\n" +
            "\t\t));\n" +
            "    \n" +
            "    output.compile_to_file(\"halide_gen_%s\", input);\n" +
            "  \n" +
            "    return 0;\n" +
            "}";
    private Guess rGuess, tGuess;

    public HalideGenerator(Guess rGuess, Guess tGuess) {
        this.rGuess = rGuess;
        this.tGuess = tGuess;
    }

    public void generate() {
        String generated = String.format(this.halideBase,
                rGuess.getGeneratedCode(true), rGuess.getGeneratedCode(),
                tGuess.getGeneratedCode(true), tGuess.getGeneratedCode(),
                System.currentTimeMillis() + "");
        System.out.println("\n\n\n\n\n\n\n");
        System.out.println(generated);
        System.out.println("\n\n\n\n\n\n\n");
    }
}
